" General Settings {{{

set confirm         " confirm on quit, etc.
set nonumber        " Don't display line numbers
set hidden          " Unloaded buffers remain in memory, with all unsaved changes
set scrolloff=0     " Don't enforce any visible lines beyond cursor position
set showbreak=↪     " better line wraps
set autoindent      " new line indent is obtained from the previous line
set history=50      " commands to store in search, command-line, input-line history
set undolevels=50
set noswapfile      " Only enable swapfile for certain buffers (in autocommands)

" Backup file in the course of update, delete backup after
" For backupskip patterns, no backups made entirely
set nobackup
set writebackup
set backupskip=*/tmp/*,$TMPDIR/*,~/.w3m/w3mtmp*,/dev/shm/*

" Only process the modeline from the first or last line of the file
" Prevent the string 'ex:' (short for example) from interpretation as a modeline
set modelines=1
set backspace=indent,eol,start  " Insert-mode <BS> to work in traditional way

set viminfofile=~/.vim/viminfo
" Vim info (data saved upon exiting VIM or with :wv[iminfo]
" ': Store marks for this # prev files
" <: max lines for registers
" h: disable 'hlsearch' effect upon load
" r: don't save marks for this file prefix
" s: maximum size of an item in Kbyte
" n: name of the viminfo file (overwritten with 'viminfofile'). Include last.
set viminfo='50,<50,s10,h,r~/.w3m/w3mtmp,r/dev/shm,r/tmp

" Don't set the alternate file name (# register) for the :read <file> command
set cpoptions-=a

" Tab related
" To insert a real tab when 'expandtab' is on, use CTRL-V<Tab>.
" Use :retab to fix existing tabs
set tabstop=4 shiftwidth=4 expandtab
set shiftround      " round indent to multiple of 'shiftwidth'

set startofline     " When moving to top/middle/bottom (H/M/L) cursor at col 1
" set smartindent   " similar to above, but for C programs, or:
" set cindent
set wrap            " Line wrap
set linebreak       " line breaks at words, not characters
set breakindent

set foldmethod=marker
set foldnestmax=3   " deepest fold is 3 levels

set laststatus=0    " Don't display status bar regardless of # of windows open
":set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set ruler           " Use the last line to display line/column number, etc
set rulerformat=%15(%l/%L,%c%V%)
set showtabline=1   " Show the tabline by default for >1 tabs
set showmatch       " Show matching bracket when inserted
set synmaxcol=300   " Don't try to highlight long lines

set wildmenu        " enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=full
set wildcharm=<C-z>
" set wildignorecase  " Enabling prevents $HOME/ autocompletion. Bug?
set wildignore+=*.o,*.obj,*~,*.png,*.gif,*.jpg,*.jpeg,*.zip,*.jar,*.pyc
" set wildignore+=*/tmp/* " if enabled, also prevents any /tmp/ autocommands

set list            " display the below characters
set listchars=tab:»\ ,trail:·,nbsp:·

"" Import the GUI menu into console mode
"source $VIMRUNTIME/menu.vim
"set cpo-=<
"map <C-m> :emenu <C-Z>

set splitbelow splitright   " better splitting
set noequalalways " Don't automatically resize windows upon split or close

" Language related
" Configure keymap, disable by default.
" use <CTRL-6> or <CTRL-^> in insert/search/cmd mode to toggle
set keymap=russian-yawerty
set iminsert=0
set imsearch=-1

" Search related
set hlsearch    " highlight search pattern. :noh[lsearch] to disable until next search
set ignorecase  " case insensitive regular expressions
set smartcase   " overwrite ignorecase when uppercase characters are present
set incsearch   " Automatically jump to search term
set infercase   " adjust case of a keyword completion match (local to buffer)
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" set colorcolumn=80  " show right margin

filetype plugin on

" Colorization
syntax on
set background=dark
color desert

" }}}

" Key mappings {{{

" Map <space> as leader instead of the default backslash
let mapleader=" "

" Habit to strike <c-b> as the tmux prefix (since changed)
map <c-b> <Nop>

" Easier and more traditional keystroke for saving a modified buffer
nmap <c-s> :update<CR>

" Y behaves copies from the cursor to EOL
noremap Y y$

" noremap j gj
" noremap k gk

" Preserve selection when indenting
" vmap > >gv
" vmap < <gv

" Common files
nnoremap <leader>. :e $MYVIMRC<cr>
nnoremap ,N :e $NOTES<cr>
nmap ,T :e $TAGS_GLOBAL<CR>

" Operator-pending mappings (for operator and visual modes only, not normal)
map <silent> i/  :<c-u>normal! T/vt/<cr>
nunmap i/
map <silent> a/  :<c-u>normal! F/vf/<cr>
nunmap a/
map <silent> i\|  :<c-u>normal! T\|vt\|<cr>
nunmap i\|
map <silent> a\|  :<c-u>normal! F\|vf\|<cr>
nunmap a\|
map <silent> i*  :<c-u>normal! T*vt*<cr>
nunmap i*
map <silent> a*  :<c-u>normal! F*vf*<cr>
nunmap a*
" Op mapping for everything from cursor to last character entered
" Ex: 'dl(' will delete everything from cursor to the last '(' of line
omap <silent> <expr> l ':<c-u>normal! v$F' . nr2char(getchar()) . '<cr>'

" Tag mappings
if empty($TAGS_GLOBAL)
    let $TAGS_GLOBAL=$XDG_CONFIG_HOME . '/tags.global'
endif
set tags+=$TAGS_GLOBAL
" Remap CTRL+] to use 'tjump' instead of 'tag'
" map <C-]> :tjump<space><C-R><C-w><CR>
nmap <leader>t :tag<space>
map ,t :call AddTag('<C-R><C-W>')<CR>
nmap ;tp :tprev<CR>
nmap <C-\> :tnext<CR>
nmap ;tn :tnext<CR>
nmap ;tf :tfirst<CR>
nmap ;tl :tlast<CR>

nmap <F1> :bprevious<CR>
nmap <F2> :bnext<CR>
nmap <F3> :SwitchCurrentNextWord<CR>``<C-L>
" List browse mode for navigating among indented lists similar to a
" file manager navigating directory structure. Requires scripts/listbrowse.vim
nmap <F4> :call ToggleListMode()<CR>
" 'Compile' present document using makeprg
nmap <F5> :make!<CR>
" Toggle spell-check (:spellinfo to see currently enabled dictionaries)
nmap <F6> :setlocal spell!<CR>
" Fill in the desired language(s) (en,es,pt,pl,ru,...) and press enter
nmap <F7> :setlocal spelllang=en,ru
" Toggle relative numbering
nmap <F9> :setlocal relativenumber!<CR>

" To avoid specific insert-mode abbreviation with mode enabled,
" type <C-V> right before <space> that would trigger the abbreviation.
" note: expandtab gets disabled with paste mode on
" nmap <F10> :echo "toggling abbreviations (and paste mode)" \| setlocal paste! \| setlocal expandtab <CR>
set pastetoggle=<F10>   " toggle paste mode for normal and insert modes

nmap <Leader>1 <F1>
nmap <Leader>2 <F2>
nmap <Leader>3 <F3>
nmap <Leader>4 <F4>
nmap <Leader>5 <F5>
nmap <Leader>6 <F6>
nmap <Leader>7 <F7>
nmap <Leader>8 <F8>
nmap <Leader>9 <F9>
nmap <Leader>0 <F10>

" Move lines (or entire visual blocks) with Ctrl+j/k keys (Alt mappings don't work)
nnoremap <C-j> :m+<CR>==
nnoremap <C-k> :m-2<CR>==
" inoremap <C-j> <Esc>:m+<CR>==gi
" inoremap <C-k> <Esc>:m-2<CR>==gi
vnoremap <C-j> :m'>+<CR>gv=gv
vnoremap <C-k> :m-2<CR>gv=gv

" Navigation related
" Jump to alternate (last) file in '#' register, also <C-^>
nmap <leader><space> :b#<cr>
nmap <BS> :b#<cr>
" List all buffers and offer selection or buffer operation by number/name
nmap <leader>l :ls<CR>:b
" - delete current buffer and display previous buffer in its window
nmap <leader>dd :b#<CR>:bdelete #<CR>:let @#=@%<CR>
" Views a list of buffers in tab completion, presuming <C-z> is the *wildcharm*
nnoremap <leader>b :buffer <C-z><S-Tab>
nnoremap <leader>B :sbuffer <C-z><S-Tab>

" Find friendly settings
set path=.,**
nnoremap <leader>f :find *

" Useful one-finger navigation
nmap - <pageup>
nmap <down> <pagedown>
nmap = <pagedown>
nmap + <pagedown>
nmap <up> <pageup>
nmap <left> :tabprevious<CR>
nmap <right> :tabnext<CR>
" nmap <del> :tabnext<CR>

" Tab navigation
nnoremap tn :tabnew<CR>
nnoremap tl :tabnext<CR>
nnoremap th :tabprevious<CR>
nnoremap t[ :tabm-<CR>
nnoremap t] :tabm+<CR>
nnoremap t0 :tabn 1<CR>
nnoremap t$ :tabn $<CR>
nnoremap to :tabonly<CR>
" To split all buffers within one tab use :sba or :vert sba
" <C-w>T will move the current window to a new tab page.
nnoremap <leader>- :call ToggleTabLine()<cr>

" Pipe buffer content to the jrnl app
map ,j :w !jrnl

" Select a link for copy or open with an application
map ,l :silent w !linkgrabber

command! -nargs=1 -complete=file -range -bar
    \ AppendToFile <line1>,<line2>w! >> <args>
    \ | echo "Line or selection appended to file"
" Append the line or selection to $NOTES
map ,n :AppendToFile $NOTES<CR>

" Format buffer or selection to fixed width (ie for email)
" NOTE: easier to use gq/gw with textwidth set to > 0
"       set formatoptions+=a (auto) for VIM to always keep the paragraph formatted!
command! -nargs=1 -range=% FixedWidth <line1>,<line2>!fmt -<args>
map ,f :FixedWidth 78

" view the diff/gitdiff between buffer and respective file on disk
nmap ,d :w !diff -u % -<CR>

" Git diff of the current file
nmap ,gd :!git diff % <CR>

" Look up the current word or selection via 'dict' via K
set keywordprg=dict
" nmap ;d :!dict <C-r><C-w><CR>
" vmap ;d y:!dict '<C-r>"'<CR>

" Make a backup of the file on disk
nmap ,b :!cp -av % %.bak<CR>

" Email the buffer or selection via mutt
map ,e :w !mutt <address>

" TODO: revise the ,x* keystrokes
" inspired by https://github.com/gotbletu/

" Open link under cursor (ie YouTube) in MPV (see 'isfname' for link format)
map ,xm :exec ":!NQDIR=$XDG_CACHE_HOME/mpv_queue nq mpv --quiet
    \--ytdl-format='bestvideo[height<=480]+bestaudio/best[height<=480]' " .
    \"<c-r><c-f>"<CR><CR>

" Copy link under cursor to the tmux buffer
map ,xl :!tmux set-buffer "<c-r><c-f>"<CR><CR>
    \:echo 'link copied to Tmux buffer'<CR>

" Copy buffer full file path to tmux buffer
" map <leader>g :exec "echo '" . expand("%:~") . "'"<CR>
map ,xg :!tmux set-buffer "<c-r>=expand("%:p:~")<CR>"<CR><CR>
    \:echo 'buffer path copied to Tmux'<CR>

" Convert list separated by any operator-entered deliniator to vertical, then auto-indent the new lines with '='
map <expr> ,c ':s/\s*\' . nr2char(getchar()) . '\s*/\r/g \| normal V``j=<CR>'
" Same as above, but fixed mapping for comma and semicolon delimeters
map ,C :s/\s*[,;]\s*/\r/g \| normal V``j=<CR>

" Force a limited width soft-wrapping
nmap <C-w>m :if &columns>80 \| set columns=80 \| endif<CR>

" More search mappings
" Lay out the replace-all template
nnoremap S :%s/\v/gc<left><left><left>
vnoremap S :s/\v/g<left><left>
" vimgrep command template
nnoremap <leader>s :vimgrep //g %<C-Left><C-Left><Right>
" vimgrep template to search through all buffers and append to error list
nnoremap <leader>S :silent bufdo vimgrepadd //g %<C-Left><C-Left><Right>
" search list (what is technically the 'error' list) shortcuts
nnoremap ;n :cnext<CR>
nnoremap ;p :cprev<CR>
nnoremap ;o :copen 6<CR>
nnoremap ;N :silent cnewer<CR>
nnoremap ;P :silent colder<CR>
" Start a new, clear clist
nnoremap ;C :cexpr []<CR>
" TODO: prepend vimgrep with :noautocmd for speedup

" Move lines matching pattern to below current line
map ,m :g//m''<Left><Left><Left><Left>

" Set the next unused lower-case mark, round-robin
nmap <silent> ;m :call NewMark()<CR>

" Spelling
set spelllang=en,ru
" Apply the first spelling correction
nmap <leader>z 1z=
nmap ZA :spellrepall<CR>

" Copy selected text to system clipboard (requires gvim installed):
" vnoremap <C-c> "+y

" TMUX buffer integration
command! -range TmuxCopy silent <line1>,<line2>w !tmux load-buffer -
command! -range TmuxCut silent <line1>,<line2>!tmux load-buffer -
" note: take caution if mapping below in normal mode
vmap <C-c> :TmuxCopy<cr>
vmap <C-x> :TmuxCut<cr>
" Paste from tmux buffer
nmap <leader>p :r !tmux show-buffer<cr>
nmap <leader>P :.-1r !tmux show-buffer<cr>

" Save a few keystrokes for capitalizing or lower-casing words
nnoremap ;U gUiw
nnoremap ;u guiw
" Switch case of the first letter of word
nmap ;c gEw~b
imap ;c <ESC>gEw~gi
" Uppercase first letter of word, lower-case rest
" map ;c :silent! s/\w*\%#\w*/\u\L&/<CR><C-L>

" Surround the current word or selected text with the argument character
"   Exception - 'b' for '**' and 'q' for double quote
" Note: <expr> mapping, per dynamic passage of pressed char and current mode
noremap <expr> ;s '<cmd>call SurroundText("' . nr2char(getchar()) . '")<CR>'
inoremap <expr> ;s '<cmd>normal ;s' . nr2char(getchar()) . '<CR>'

" Delete the characters surrounding the position (ie (,{,[,<,',")
nnoremap <silent> <expr> ;d ':normal vi' . nr2char(getchar()) . '<cr><esc>`<X`>x``'

command! SwitchCurrentNextWord s/\v(<\k*%#\k*>)(\_.{-})(<\k+>)/\3\2\1/

" Switch (depending on mode)
"   1. everything from current word to the next deliniating character, or
"   2. selection
" with everything after deliniator until the terminating character (or EOL)
map <silent> <expr> ,s '<cmd>call SwitchFieldsUntilTerm("' . nr2char(getchar()) . '","' . nr2char(getchar()) . '")<CR>``<Esc>'
" Same as above, but only require the deliniating character
map <silent> <expr> ,S '<cmd>call SwitchFields("' . nr2char(getchar()) . '")<CR>``<Esc>'

" Navigating with guides (<++>) - enter insert mode at next instance
nmap ;<Tab> /<++><CR>"_ca>
imap ;<Tab> <Esc>:normal ;<Tab><CR>a

" Insert a plain text section divider
nmap ,D O<Esc>10i=<Esc>a<Space><++><Space><Esc>10a=<Esc>0

nmap <leader>n :call RenameFile()<cr>

" Filetype-specific bindings
" Markdown: ~/.vim/ftplugin/markdown/bindings.vim
"       and ~/.vim/ftplugin/markdown/helpers.vim
" HTML: ~/.vim/after/ftplugin/html.vim
" LATEX: ~/.vim/ftplugin/tex.vim
" BIB: ~/.vim/ftplugin/bib.vim

" }}}
" IntelliSense Autocomplete {{{
" https://importgeek.wordpress.com/2012/03/25/how-to-enable-autocomplete-in-vim-or-vim-intellisense/
" Ctrl+N to complete code
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
"------------------------------------------------------
"}}}

" Autocommands {{{

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Custom highlight group
au Filetype * highlight MyHighlights ctermbg=DarkYellow guibg=DarkYellow guifg=Black ctermfg=Black
au Filetype * match MyHighlights /TODO\|NOTE\|UPDATE\|TBD/
" Highlight characters beyond 80 in source code
" NOTE: once enabled, persists for current window, regardless of file type
au Filetype perl,c,sh,picolisp highlight rightMargin term=bold ctermfg=red guifg=red
au Filetype perl,c,sh,picolisp 2match rightMargin /.\%>80v/

autocmd FileType gitcommit setlocal spell
au FileType picolisp setlocal expandtab tabstop=3 shiftwidth=3 autoindent nosmartindent shellpipe= makeprg=pil\ %\ +

" Disabled perl file includes to speedup curr buffer include file searches
au FileType perl setlocal include=''

au BufNewFile,BufRead inspirations.dat setlocal makeprg=pyro\ %
au BufNewFile,BufRead *.asy setlocal ft=asy makeprg=asy\ % autowrite
au BufNewFile,BufRead *.tex setlocal makeprg=pdflatex\ % autowrite
au BufNewFile,Bufread *.pde,*.ino setlocal ft=arduino
au BufNewFile,BufRead *.cir setlocal ft=spice
au BufNewFile,BufRead calcurse*,*calcurse/notes/* set filetype=markdown
au BufNewFile,BufRead */tmp/jrnl*,*/journals/*.txt set filetype=markdown
au BufNewFile,BufRead */writing/poetry/[^.]* set filetype=markdown
au BufNewFile,BufRead tags* setlocal filetype=tags tabstop=16 shiftwidth=16 noexpandtab
au BufNewFile,BufRead *.csv setf csv
au BufNewFile,BufRead */calendar/* setlocal tabstop=16 shiftwidth=16 noexpandtab
au BufRead */tmp/jrnl-new* execute '1 !echo $JRNL_HEADER'
au BufRead */tmp/*mutt* set textwidth=72
" Enable swapfile for these temporary buffers
au BufRead */tmp/*mutt*,*/tmp/jrnl*,~/.w3m/w3mtmp* setlocal swapfile
" Don't save undo history upon exiting these buffers
au BufNewFile,BufRead */tmp/*,~/.w3m/w3mtmp*,/dev/shm/* setlocal noundofile

" When alias file updated, regenerate the underlying bash shortcuts
au BufWritePost .aliases !alias-gen %

" If shorthand list updated, convert to the vim abbreviation format
au BufWritePost shorthand.txt silent !sed -r '/^(\#|\s*$)/d; s/\s*\#.*//; s/^(\S+)\s+([^,;]+).*/iab \1 \2/' % > ~/.vim/scripts/abbrev.vim

" Update binds when sxhkdrc is updated.
au BufWritePost *sxhkdrc !pkill -USR1 sxhkd
au BufWritePost ~/.Xresources !xrdb ~/.Xresources

" Populate specific files/types with skeleton content
augroup templates
    " Delete old autocommands
    au!
    " Load skeleton named after last part of directory for given pattern(s)
    au BufNewFile */writing/poetry/[^.]* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:p:h:t")
    " Load skeleton named after the file extension for given pattern(s)
    au BufNewFile *.sh silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
augroup END

" }}}

" External script and plugin settings {{{

" Load all available scripts
:runtime! scripts/*.vim

" MRU (Most Recently Used plugin)
let MRU_File = $HOME . '/.vim/vim_mru_files'
let MRU_Max_Entries = 20
let MRU_Exclude_Files = '/tmp/.*\|/w3mtmp.*'
let MRU_Window_Height = 6

" markdown plugin https://github.com/plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_level = 1
let g:vim_markdown_no_default_key_mappings = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_auto_insert_bullets = 1
let g:vim_markdown_new_list_item_indent = 0

" }}}
